/**
 * @typedef {Object} EIP712TypedData
 *
 * @property {string} messageHash hash which is signed.
 * @property {string} v v of signature generated by signing message hash.
 * @property {string} r r of signature generated by signing message hash.
 * @property {string} s s of signature generated by signing message hash.
 * @property {string} signature signature generated by signing
 *                              message hash represented into single string.
 *
 */

'use strict';

const Mosaic = require('@openst/mosaic.js');

const { EIP712TypedData: TypedDataClass } = Mosaic.Utils;
const logger = require('../logger');
/**
 * This class includes the functions shared among various classes.

 */
class Utils {
  /**
   * This function sends ethereum transaction.
   *
   * @param {Object} tx Raw transaction object generated from web3.
   * @param {Object} txOption Transaction options.
   *
   * @returns {Promise<Object>} Promise object of transaction receipt in case of
   *                            success otherwise error.
   */
  static async sendTransaction(tx, txOption) {
    return new Promise(async (onResolve, onReject) => {
      const txOptions = Object.assign({}, txOption);
      if (!txOptions.gas) {
        txOptions.gas = await tx.estimateGas(txOptions);
      }

      tx.send(txOptions)
        .on('transactionHash', (transactionHash) => {
          logger.info(`Transaction Hash : ${transactionHash}`);
        })
        .on('receipt', receipt => onResolve(receipt))
        .on('error', (error) => {
          logger.error(`Error while sending transaction ${error}`);
          return onReject(error);
        })
        .catch((exception) => {
          logger.error(`Exception while sending transaction ${exception}`);
          return onReject(exception);
        });
    });
  }

  /**
   * Prints a deprecation warning for deprecated Economy setup methods.
   * See {@link 'https://github.com/OpenST/brandedtoken.js#economy-setup'.
   *
   * @param {string} object Identifier of the chain setup related object that has been deprecated.
   */
  static deprecationNoticeEconomySetup(object) {
    const link = 'https://github.com/OpenST/brandedtoken.js#economy-setup';
    Utils.deprecationNoticeWithLink(object, link);
  }

  /**
   * Prints a deprecation warning for deprecated StakeHelper.
   * See {@link https://github.com/OpenST/brandedtoken.js/issues/119}.
   *
   * @param {string} [method] The method on the StakeHelper that is deprecated.
   */
  static deprecationNoticeStakeHelper(method) {
    const issueNumber = '119';

    let object = 'StakeHelper';
    if (method !== undefined) {
      object = `${object}::${method}()`;
    }

    Utils.deprecationNoticeWithIssue(object, issueNumber);
  }

  /**
   * Prints a deprecation warning for deprecated code.
   *
   * @param {string} object Identifier of what has been deprecated.
   * @param {string} link Link that has instructions on how to migrate.
   *
   */
  static deprecationNoticeWithLink(object, link) {
    console.warn(
      `⚠️ '${object}' has been deprecated. See ${link}`,
    );
  }


  /**
   * Prints a deprecation warning for deprecated code.
   *
   * @param {string} object Identifier of what has been deprecated.
   * @param {string} issueNumber Issue number on GitHub that has instructions on how to migrate.
   */
  static deprecationNoticeWithIssue(object, issueNumber) {
    console.warn(
      `⚠️ '${object}' has been deprecated. See https://github.com/OpenST/brandedtoken.js/issues/${issueNumber} for migration instructions.`,
    );
  }

  /**
   * Returns EIP712TypedData StakeRequest Object.
   *
   * @param stakeAmountInWei Stake amount in wei.
   * @param btStakeRequestNonce BrandedToken StakeRequest nonce.
   * @param gatewayComposerAddress Gateway composer contract address.
   * @param brandedTokenAddress BrandedToken contract address.
   *
   * @returns {EIP712TypedData} EIP712TypedData instance of StakeRequest.
   */
  static getStakeRequestTypedData(
    stakeAmountInWei,
    btStakeRequestNonce,
    gatewayComposerAddress,
    brandedTokenAddress,
  ) {
    const typedDataInput = {
      types: {
        EIP712Domain: [{ name: 'verifyingContract', type: 'address' }],
        StakeRequest: [
          { name: 'staker', type: 'address' },
          { name: 'stake', type: 'uint256' },
          { name: 'nonce', type: 'uint256' },
        ],
      },
      primaryType: 'StakeRequest',
      domain: {
        verifyingContract: brandedTokenAddress,
      },
      message: {
        staker: gatewayComposerAddress,
        stake: stakeAmountInWei,
        nonce: btStakeRequestNonce,
      },
    };

    const typedData = TypedDataClass.fromObject(typedDataInput);

    if (typedData.validate() === true) {
      return typedData;
    }
    const message = 'StakeRequest TypedData is invalid';
    logger.error(message);
    throw new Error(message);
  }
}

module.exports = Utils;
